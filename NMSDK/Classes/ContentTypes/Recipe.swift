//
//  Recipe.swift
//  NMSDK
//
//  Created by Francesco Colleoni on 27/04/16.
//  Copyright © 2016 Near srl. All rights reserved.
//

import Foundation
import NMNet

/**
 A recipe which, if evaluated, can be linked to `Content` or `Poll` reactions.
 
 - seealso:
   - `Content`
   - `Poll`
 */
@objc
public class Recipe: NSObject {
    // MARK: Properties
    /**
     The identifier of the recipe.
    */
    public private (set) var id = ""
    
    /**
     The name of the recipe.
    */
    public private (set) var name = ""
    
    /**
     The title of the notification associated to the recipe.
    */
    public private (set) var notificationTitle: String?
    
    /**
     The text of the notification associated to the recipe.
    */
    public private (set) var notificationText: String?
    
    /**
     The name of the (server-side) plugin which generates the input (pulse) accepted by the recipe.
    */
    public private (set) var pulsePlugin = ""
    
    /**
     The identifier of the object which generates the input (pulse) accepted by the recipe.
    */
    public private (set) var pulseBundle = ""
    
    /**
     The name of the action which generates the input (pulse) accepted by the recipe.
    */
    public private (set) var pulseAction = ""
    
    /**
     The name of the (server-side) plugin which can filter the input (pulse) accepted by the recipe.
    */
    public private (set) var operationPlugin: String?
    
    /**
     The identifier of the object which can filter the input (pulse) accepted by the recipe.
    */
    public private (set) var operationBundle: String?
    
    /**
     The name of the action which can filter the input (pulse) accepted by the recipe.
    */
    public private (set) var operationAction: String?
    
    /**
     The name of the (client-side, or SDK) plugin which produces the output (reaction) of the recipe.
    */
    public private (set) var reactionPlugin = ""
    
    /**
     The identifier of the object which is returned as an output (reaction) as a consequence of a successful evaluation of the recipe.
    */
    public private (set) var reactionBundle = ""
    
    /**
     The name of the action which is associated to the creation of the output of the recipe.
    */
    public private (set) var reactionAction = ""
    
    /**
     The output "content" reaction associated to the recipe.
    */
    public private (set) var content: Content?
    
    /**
     The output "poll" reaction associated to the recipe.
    */
    public private (set) var poll: Poll?
    
    /**
     The output "coupon" reaction associated to the recipe.
     */
    public private (set) var coupon: Coupon?
    
    /**
     Describes the event which evaluates the recipe.
     
     A recipe is triggered by a named event, defined by `pulseAction`, and it is evaluated when generated by the resource `pulseBundle` of `pulsePlugin`.
     
     The output of the recipe is the resource `reactionBundle` of `reactionPlugin`.
     */
    public var evaluation: String {
        return "when \(pulsePlugin)▶️\(pulseBundle) triggers \(pulseAction), \(name) (recipe \(id)) evaluates \(reactionPlugin)▶️\(reactionBundle)"
    }
    
    /**
     The creation date of the recipe.
    */
    public private (set) var creationDate: NSDate?
    
    /**
     The last update date of the recipe.
     */
    public private (set) var lastUpdate: NSDate?
    
    // MARK: Initializers
    /**
     Initializes a new `Recipe`.
     
     - parameter recipe: the source `APRecipe` instance
    */
    public init(recipe: APRecipe, contentReaction: APRecipeContent? = nil, pollReaction: APRecipePoll? = nil, couponReaction: APCoupon? = nil) {
        super.init()
        
        id = recipe.id
        name = recipe.name
        notificationText = recipe.notificationText
        notificationTitle = recipe.notificationTitle
        
        pulsePlugin = recipe.pulse(.Plugin)
        pulseBundle = recipe.pulse(.Bundle)
        pulseAction = recipe.pulse(.Action)
        
        operationPlugin = recipe.operation(.Plugin)
        operationBundle = recipe.operation(.Bundle)
        operationAction = recipe.operation(.Action)
        
        reactionPlugin = recipe.reaction(.Plugin)
        reactionBundle = recipe.reaction(.Bundle)
        reactionAction = recipe.reaction(.Action)
        
        creationDate = recipe.creationDate
        lastUpdate = recipe.lastUpdate
        
        if let reaction = contentReaction {
            content = Content(content: reaction)
        }
        
        if let reaction = pollReaction {
            poll = Poll(poll: reaction)
        }
        
        if let reaction = couponReaction {
            coupon = Coupon(coupon: reaction)
        }
    }
    
    // MARK: Properties
    /**
     Human-readable description of `Self`.
    */
    public override var description: String {
        return Console.describe(Recipe.self, properties:
            ("id", id), ("name", name), ("notificationText", notificationText),
            ("pulsePlugin", pulsePlugin), ("pulseBundle", pulseBundle), ("pulseAction", pulseAction),
            ("operationPlugin", operationPlugin), ("operationBundle", operationBundle), ("operationAction", operationAction),
            ("reactionPlugin", reactionPlugin), ("reactionBundle", reactionBundle), ("reactionAction", reactionAction),
            ("evaluation", evaluation))
    }
    
    // MARK: Methods
    /**
     Returns an instance of a UILocalNotification.
     
     The alert body of the local notification will be equal to `notificationText`, while its title will be equal to `notificationTitle`.
     
     - parameter overrideTitle: if not `nil`, this value will be used as the the title of the notification
     - parameter fireDate: defines the fire date of the local notification
    */
    public func makeLocalNotification(overrideTitle title: String? = nil, fireDate: NSDate) -> UILocalNotification {
        let notification = UILocalNotification()
        
        notification.alertTitle = title ?? notificationTitle
        notification.alertBody = notificationText
        notification.fireDate = fireDate
        
        return notification
    }
}
